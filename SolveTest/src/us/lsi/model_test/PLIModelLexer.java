// Generated from PLIModel.g4 by ANTLR 4.9.3
package us.lsi.model_test;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PLIModelLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.9.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, ID=50, INT=51, DOUBLE=52, WS=53, 
		COMMENT=54, LINE_COMMENT=55;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
			"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
			"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
			"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
			"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
			"ID", "INT", "DOUBLE", "WS", "COMMENT", "LINE_COMMENT"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'head section'", "'='", "'('", "')'", "','", "'goal section'", 
			"'min'", "'max'", "'constraints section'", "'|'", "'in'", "'..'", "'->'", 
			"'=='", "'or'", "'=>'", "'!='", "'allDifferent'", "'permutation'", "';'", 
			"'MAX'", "'MIN'", "'OR'", "'AND'", "'ABS'", "'PWL'", "':'", "'sum'", 
			"'+'", "'-'", "'['", "']'", "'<='", "'bounds section'", "'bin'", "'int'", 
			"'free'", "'semi-continuous'", "'(int)'", "'(double)'", "'!'", "'*'", 
			"'/'", "'%'", "'<'", "'>='", "'>'", "'&&'", "'||'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, "ID", "INT", "DOUBLE", "WS", "COMMENT", "LINE_COMMENT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public PLIModelLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "PLIModel.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\29\u018a\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3"+
		"\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n"+
		"\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3"+
		"\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3"+
		"\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3"+
		"\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3"+
		"\33\3\33\3\33\3\33\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\37\3\37\3"+
		" \3 \3!\3!\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'"+
		"\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3"+
		")\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3/\3\60\3\60\3\61\3\61\3\61"+
		"\3\62\3\62\3\62\3\63\3\63\7\63\u015c\n\63\f\63\16\63\u015f\13\63\3\64"+
		"\6\64\u0162\n\64\r\64\16\64\u0163\3\65\3\65\3\65\5\65\u0169\n\65\3\66"+
		"\6\66\u016c\n\66\r\66\16\66\u016d\3\66\3\66\3\67\3\67\3\67\3\67\7\67\u0176"+
		"\n\67\f\67\16\67\u0179\13\67\3\67\3\67\3\67\3\67\3\67\38\38\38\38\78\u0184"+
		"\n8\f8\168\u0187\138\38\38\3\u0177\29\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21"+
		"\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30"+
		"/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.["+
		"/]\60_\61a\62c\63e\64g\65i\66k\67m8o9\3\2\6\5\2C\\aac|\6\2\62;C\\aac|"+
		"\5\2\13\f\17\17\"\"\4\2\f\f\17\17\2\u018f\2\3\3\2\2\2\2\5\3\2\2\2\2\7"+
		"\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2"+
		"\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2"+
		"\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2"+
		"\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2"+
		"\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2"+
		"\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M"+
		"\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2"+
		"\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2"+
		"\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\3q\3\2\2\2\5~"+
		"\3\2\2\2\7\u0080\3\2\2\2\t\u0082\3\2\2\2\13\u0084\3\2\2\2\r\u0086\3\2"+
		"\2\2\17\u0093\3\2\2\2\21\u0097\3\2\2\2\23\u009b\3\2\2\2\25\u00af\3\2\2"+
		"\2\27\u00b1\3\2\2\2\31\u00b4\3\2\2\2\33\u00b7\3\2\2\2\35\u00ba\3\2\2\2"+
		"\37\u00bd\3\2\2\2!\u00c0\3\2\2\2#\u00c3\3\2\2\2%\u00c6\3\2\2\2\'\u00d3"+
		"\3\2\2\2)\u00df\3\2\2\2+\u00e1\3\2\2\2-\u00e5\3\2\2\2/\u00e9\3\2\2\2\61"+
		"\u00ec\3\2\2\2\63\u00f0\3\2\2\2\65\u00f4\3\2\2\2\67\u00f8\3\2\2\29\u00fa"+
		"\3\2\2\2;\u00fe\3\2\2\2=\u0100\3\2\2\2?\u0102\3\2\2\2A\u0104\3\2\2\2C"+
		"\u0106\3\2\2\2E\u0109\3\2\2\2G\u0118\3\2\2\2I\u011c\3\2\2\2K\u0120\3\2"+
		"\2\2M\u0125\3\2\2\2O\u0135\3\2\2\2Q\u013b\3\2\2\2S\u0144\3\2\2\2U\u0146"+
		"\3\2\2\2W\u0148\3\2\2\2Y\u014a\3\2\2\2[\u014c\3\2\2\2]\u014e\3\2\2\2_"+
		"\u0151\3\2\2\2a\u0153\3\2\2\2c\u0156\3\2\2\2e\u0159\3\2\2\2g\u0161\3\2"+
		"\2\2i\u0165\3\2\2\2k\u016b\3\2\2\2m\u0171\3\2\2\2o\u017f\3\2\2\2qr\7j"+
		"\2\2rs\7g\2\2st\7c\2\2tu\7f\2\2uv\7\"\2\2vw\7u\2\2wx\7g\2\2xy\7e\2\2y"+
		"z\7v\2\2z{\7k\2\2{|\7q\2\2|}\7p\2\2}\4\3\2\2\2~\177\7?\2\2\177\6\3\2\2"+
		"\2\u0080\u0081\7*\2\2\u0081\b\3\2\2\2\u0082\u0083\7+\2\2\u0083\n\3\2\2"+
		"\2\u0084\u0085\7.\2\2\u0085\f\3\2\2\2\u0086\u0087\7i\2\2\u0087\u0088\7"+
		"q\2\2\u0088\u0089\7c\2\2\u0089\u008a\7n\2\2\u008a\u008b\7\"\2\2\u008b"+
		"\u008c\7u\2\2\u008c\u008d\7g\2\2\u008d\u008e\7e\2\2\u008e\u008f\7v\2\2"+
		"\u008f\u0090\7k\2\2\u0090\u0091\7q\2\2\u0091\u0092\7p\2\2\u0092\16\3\2"+
		"\2\2\u0093\u0094\7o\2\2\u0094\u0095\7k\2\2\u0095\u0096\7p\2\2\u0096\20"+
		"\3\2\2\2\u0097\u0098\7o\2\2\u0098\u0099\7c\2\2\u0099\u009a\7z\2\2\u009a"+
		"\22\3\2\2\2\u009b\u009c\7e\2\2\u009c\u009d\7q\2\2\u009d\u009e\7p\2\2\u009e"+
		"\u009f\7u\2\2\u009f\u00a0\7v\2\2\u00a0\u00a1\7t\2\2\u00a1\u00a2\7c\2\2"+
		"\u00a2\u00a3\7k\2\2\u00a3\u00a4\7p\2\2\u00a4\u00a5\7v\2\2\u00a5\u00a6"+
		"\7u\2\2\u00a6\u00a7\7\"\2\2\u00a7\u00a8\7u\2\2\u00a8\u00a9\7g\2\2\u00a9"+
		"\u00aa\7e\2\2\u00aa\u00ab\7v\2\2\u00ab\u00ac\7k\2\2\u00ac\u00ad\7q\2\2"+
		"\u00ad\u00ae\7p\2\2\u00ae\24\3\2\2\2\u00af\u00b0\7~\2\2\u00b0\26\3\2\2"+
		"\2\u00b1\u00b2\7k\2\2\u00b2\u00b3\7p\2\2\u00b3\30\3\2\2\2\u00b4\u00b5"+
		"\7\60\2\2\u00b5\u00b6\7\60\2\2\u00b6\32\3\2\2\2\u00b7\u00b8\7/\2\2\u00b8"+
		"\u00b9\7@\2\2\u00b9\34\3\2\2\2\u00ba\u00bb\7?\2\2\u00bb\u00bc\7?\2\2\u00bc"+
		"\36\3\2\2\2\u00bd\u00be\7q\2\2\u00be\u00bf\7t\2\2\u00bf \3\2\2\2\u00c0"+
		"\u00c1\7?\2\2\u00c1\u00c2\7@\2\2\u00c2\"\3\2\2\2\u00c3\u00c4\7#\2\2\u00c4"+
		"\u00c5\7?\2\2\u00c5$\3\2\2\2\u00c6\u00c7\7c\2\2\u00c7\u00c8\7n\2\2\u00c8"+
		"\u00c9\7n\2\2\u00c9\u00ca\7F\2\2\u00ca\u00cb\7k\2\2\u00cb\u00cc\7h\2\2"+
		"\u00cc\u00cd\7h\2\2\u00cd\u00ce\7g\2\2\u00ce\u00cf\7t\2\2\u00cf\u00d0"+
		"\7g\2\2\u00d0\u00d1\7p\2\2\u00d1\u00d2\7v\2\2\u00d2&\3\2\2\2\u00d3\u00d4"+
		"\7r\2\2\u00d4\u00d5\7g\2\2\u00d5\u00d6\7t\2\2\u00d6\u00d7\7o\2\2\u00d7"+
		"\u00d8\7w\2\2\u00d8\u00d9\7v\2\2\u00d9\u00da\7c\2\2\u00da\u00db\7v\2\2"+
		"\u00db\u00dc\7k\2\2\u00dc\u00dd\7q\2\2\u00dd\u00de\7p\2\2\u00de(\3\2\2"+
		"\2\u00df\u00e0\7=\2\2\u00e0*\3\2\2\2\u00e1\u00e2\7O\2\2\u00e2\u00e3\7"+
		"C\2\2\u00e3\u00e4\7Z\2\2\u00e4,\3\2\2\2\u00e5\u00e6\7O\2\2\u00e6\u00e7"+
		"\7K\2\2\u00e7\u00e8\7P\2\2\u00e8.\3\2\2\2\u00e9\u00ea\7Q\2\2\u00ea\u00eb"+
		"\7T\2\2\u00eb\60\3\2\2\2\u00ec\u00ed\7C\2\2\u00ed\u00ee\7P\2\2\u00ee\u00ef"+
		"\7F\2\2\u00ef\62\3\2\2\2\u00f0\u00f1\7C\2\2\u00f1\u00f2\7D\2\2\u00f2\u00f3"+
		"\7U\2\2\u00f3\64\3\2\2\2\u00f4\u00f5\7R\2\2\u00f5\u00f6\7Y\2\2\u00f6\u00f7"+
		"\7N\2\2\u00f7\66\3\2\2\2\u00f8\u00f9\7<\2\2\u00f98\3\2\2\2\u00fa\u00fb"+
		"\7u\2\2\u00fb\u00fc\7w\2\2\u00fc\u00fd\7o\2\2\u00fd:\3\2\2\2\u00fe\u00ff"+
		"\7-\2\2\u00ff<\3\2\2\2\u0100\u0101\7/\2\2\u0101>\3\2\2\2\u0102\u0103\7"+
		"]\2\2\u0103@\3\2\2\2\u0104\u0105\7_\2\2\u0105B\3\2\2\2\u0106\u0107\7>"+
		"\2\2\u0107\u0108\7?\2\2\u0108D\3\2\2\2\u0109\u010a\7d\2\2\u010a\u010b"+
		"\7q\2\2\u010b\u010c\7w\2\2\u010c\u010d\7p\2\2\u010d\u010e\7f\2\2\u010e"+
		"\u010f\7u\2\2\u010f\u0110\7\"\2\2\u0110\u0111\7u\2\2\u0111\u0112\7g\2"+
		"\2\u0112\u0113\7e\2\2\u0113\u0114\7v\2\2\u0114\u0115\7k\2\2\u0115\u0116"+
		"\7q\2\2\u0116\u0117\7p\2\2\u0117F\3\2\2\2\u0118\u0119\7d\2\2\u0119\u011a"+
		"\7k\2\2\u011a\u011b\7p\2\2\u011bH\3\2\2\2\u011c\u011d\7k\2\2\u011d\u011e"+
		"\7p\2\2\u011e\u011f\7v\2\2\u011fJ\3\2\2\2\u0120\u0121\7h\2\2\u0121\u0122"+
		"\7t\2\2\u0122\u0123\7g\2\2\u0123\u0124\7g\2\2\u0124L\3\2\2\2\u0125\u0126"+
		"\7u\2\2\u0126\u0127\7g\2\2\u0127\u0128\7o\2\2\u0128\u0129\7k\2\2\u0129"+
		"\u012a\7/\2\2\u012a\u012b\7e\2\2\u012b\u012c\7q\2\2\u012c\u012d\7p\2\2"+
		"\u012d\u012e\7v\2\2\u012e\u012f\7k\2\2\u012f\u0130\7p\2\2\u0130\u0131"+
		"\7w\2\2\u0131\u0132\7q\2\2\u0132\u0133\7w\2\2\u0133\u0134\7u\2\2\u0134"+
		"N\3\2\2\2\u0135\u0136\7*\2\2\u0136\u0137\7k\2\2\u0137\u0138\7p\2\2\u0138"+
		"\u0139\7v\2\2\u0139\u013a\7+\2\2\u013aP\3\2\2\2\u013b\u013c\7*\2\2\u013c"+
		"\u013d\7f\2\2\u013d\u013e\7q\2\2\u013e\u013f\7w\2\2\u013f\u0140\7d\2\2"+
		"\u0140\u0141\7n\2\2\u0141\u0142\7g\2\2\u0142\u0143\7+\2\2\u0143R\3\2\2"+
		"\2\u0144\u0145\7#\2\2\u0145T\3\2\2\2\u0146\u0147\7,\2\2\u0147V\3\2\2\2"+
		"\u0148\u0149\7\61\2\2\u0149X\3\2\2\2\u014a\u014b\7\'\2\2\u014bZ\3\2\2"+
		"\2\u014c\u014d\7>\2\2\u014d\\\3\2\2\2\u014e\u014f\7@\2\2\u014f\u0150\7"+
		"?\2\2\u0150^\3\2\2\2\u0151\u0152\7@\2\2\u0152`\3\2\2\2\u0153\u0154\7("+
		"\2\2\u0154\u0155\7(\2\2\u0155b\3\2\2\2\u0156\u0157\7~\2\2\u0157\u0158"+
		"\7~\2\2\u0158d\3\2\2\2\u0159\u015d\t\2\2\2\u015a\u015c\t\3\2\2\u015b\u015a"+
		"\3\2\2\2\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e"+
		"f\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u0162\4\62;\2\u0161\u0160\3\2\2\2"+
		"\u0162\u0163\3\2\2\2\u0163\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164h\3"+
		"\2\2\2\u0165\u0166\5g\64\2\u0166\u0168\7\60\2\2\u0167\u0169\5g\64\2\u0168"+
		"\u0167\3\2\2\2\u0168\u0169\3\2\2\2\u0169j\3\2\2\2\u016a\u016c\t\4\2\2"+
		"\u016b\u016a\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016b\3\2\2\2\u016d\u016e"+
		"\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0170\b\66\2\2\u0170l\3\2\2\2\u0171"+
		"\u0172\7\61\2\2\u0172\u0173\7,\2\2\u0173\u0177\3\2\2\2\u0174\u0176\13"+
		"\2\2\2\u0175\u0174\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0178\3\2\2\2\u0177"+
		"\u0175\3\2\2\2\u0178\u017a\3\2\2\2\u0179\u0177\3\2\2\2\u017a\u017b\7,"+
		"\2\2\u017b\u017c\7\61\2\2\u017c\u017d\3\2\2\2\u017d\u017e\b\67\2\2\u017e"+
		"n\3\2\2\2\u017f\u0180\7\61\2\2\u0180\u0181\7\61\2\2\u0181\u0185\3\2\2"+
		"\2\u0182\u0184\n\5\2\2\u0183\u0182\3\2\2\2\u0184\u0187\3\2\2\2\u0185\u0183"+
		"\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0188\3\2\2\2\u0187\u0185\3\2\2\2\u0188"+
		"\u0189\b8\2\2\u0189p\3\2\2\2\t\2\u015d\u0163\u0168\u016d\u0177\u0185\3"+
		"\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}